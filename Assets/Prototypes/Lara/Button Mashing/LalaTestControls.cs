//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/Prototypes/Lara/Button Mashing/LalaTestControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @LalaTestControls : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @LalaTestControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""LalaTestControls"",
    ""maps"": [
        {
            ""name"": ""GameplayActions"",
            ""id"": ""a3e6f093-7348-42d7-92de-e266b0a4608f"",
            ""actions"": [
                {
                    ""name"": ""Escape Grip"",
                    ""type"": ""Button"",
                    ""id"": ""e8fbdf37-b875-4fe6-9ba7-7448de961dff"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Tap"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""43b2ce9d-5845-4ab4-b2fa-2df28a6434ea"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""4d2043ee-2cf3-45c0-8763-5a184085ed52"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": ""Tap"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Escape Grip"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""165fe091-c114-431a-ac00-7d736ab92df1"",
                    ""path"": ""<Gamepad>/buttonEast"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // GameplayActions
        m_GameplayActions = asset.FindActionMap("GameplayActions", throwIfNotFound: true);
        m_GameplayActions_EscapeGrip = m_GameplayActions.FindAction("Escape Grip", throwIfNotFound: true);
        m_GameplayActions_Jump = m_GameplayActions.FindAction("Jump", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // GameplayActions
    private readonly InputActionMap m_GameplayActions;
    private IGameplayActionsActions m_GameplayActionsActionsCallbackInterface;
    private readonly InputAction m_GameplayActions_EscapeGrip;
    private readonly InputAction m_GameplayActions_Jump;
    public struct GameplayActionsActions
    {
        private @LalaTestControls m_Wrapper;
        public GameplayActionsActions(@LalaTestControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @EscapeGrip => m_Wrapper.m_GameplayActions_EscapeGrip;
        public InputAction @Jump => m_Wrapper.m_GameplayActions_Jump;
        public InputActionMap Get() { return m_Wrapper.m_GameplayActions; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(GameplayActionsActions set) { return set.Get(); }
        public void SetCallbacks(IGameplayActionsActions instance)
        {
            if (m_Wrapper.m_GameplayActionsActionsCallbackInterface != null)
            {
                @EscapeGrip.started -= m_Wrapper.m_GameplayActionsActionsCallbackInterface.OnEscapeGrip;
                @EscapeGrip.performed -= m_Wrapper.m_GameplayActionsActionsCallbackInterface.OnEscapeGrip;
                @EscapeGrip.canceled -= m_Wrapper.m_GameplayActionsActionsCallbackInterface.OnEscapeGrip;
                @Jump.started -= m_Wrapper.m_GameplayActionsActionsCallbackInterface.OnJump;
                @Jump.performed -= m_Wrapper.m_GameplayActionsActionsCallbackInterface.OnJump;
                @Jump.canceled -= m_Wrapper.m_GameplayActionsActionsCallbackInterface.OnJump;
            }
            m_Wrapper.m_GameplayActionsActionsCallbackInterface = instance;
            if (instance != null)
            {
                @EscapeGrip.started += instance.OnEscapeGrip;
                @EscapeGrip.performed += instance.OnEscapeGrip;
                @EscapeGrip.canceled += instance.OnEscapeGrip;
                @Jump.started += instance.OnJump;
                @Jump.performed += instance.OnJump;
                @Jump.canceled += instance.OnJump;
            }
        }
    }
    public GameplayActionsActions @GameplayActions => new GameplayActionsActions(this);
    public interface IGameplayActionsActions
    {
        void OnEscapeGrip(InputAction.CallbackContext context);
        void OnJump(InputAction.CallbackContext context);
    }
}
