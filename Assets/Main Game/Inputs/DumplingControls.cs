//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/Main Game/Inputs/DumplingControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

namespace MainGame.Inputs
{
    public partial class @DumplingControls : IInputActionCollection2, IDisposable
    {
        public InputActionAsset asset { get; }
        public @DumplingControls()
        {
            asset = InputActionAsset.FromJson(@"{
    ""name"": ""DumplingControls"",
    ""maps"": [
        {
            ""name"": ""DumplingPlayer"",
            ""id"": ""e38c6e42-a93a-441b-8e52-301fb77ed920"",
            ""actions"": [
                {
                    ""name"": ""Look"",
                    ""type"": ""Value"",
                    ""id"": ""deea88f8-e463-47f7-8efc-2dadf1198d48"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""32c3b2b2-bac9-43e0-b4db-e0d1f3420715"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard & Mouse"",
                    ""action"": ""Look"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Keyboard & Mouse"",
            ""bindingGroup"": ""Keyboard & Mouse"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
            // DumplingPlayer
            m_DumplingPlayer = asset.FindActionMap("DumplingPlayer", throwIfNotFound: true);
            m_DumplingPlayer_Look = m_DumplingPlayer.FindAction("Look", throwIfNotFound: true);
        }

        public void Dispose()
        {
            UnityEngine.Object.Destroy(asset);
        }

        public InputBinding? bindingMask
        {
            get => asset.bindingMask;
            set => asset.bindingMask = value;
        }

        public ReadOnlyArray<InputDevice>? devices
        {
            get => asset.devices;
            set => asset.devices = value;
        }

        public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

        public bool Contains(InputAction action)
        {
            return asset.Contains(action);
        }

        public IEnumerator<InputAction> GetEnumerator()
        {
            return asset.GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }

        public void Enable()
        {
            asset.Enable();
        }

        public void Disable()
        {
            asset.Disable();
        }
        public IEnumerable<InputBinding> bindings => asset.bindings;

        public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
        {
            return asset.FindAction(actionNameOrId, throwIfNotFound);
        }
        public int FindBinding(InputBinding bindingMask, out InputAction action)
        {
            return asset.FindBinding(bindingMask, out action);
        }

        // DumplingPlayer
        private readonly InputActionMap m_DumplingPlayer;
        private IDumplingPlayerActions m_DumplingPlayerActionsCallbackInterface;
        private readonly InputAction m_DumplingPlayer_Look;
        public struct DumplingPlayerActions
        {
            private @DumplingControls m_Wrapper;
            public DumplingPlayerActions(@DumplingControls wrapper) { m_Wrapper = wrapper; }
            public InputAction @Look => m_Wrapper.m_DumplingPlayer_Look;
            public InputActionMap Get() { return m_Wrapper.m_DumplingPlayer; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(DumplingPlayerActions set) { return set.Get(); }
            public void SetCallbacks(IDumplingPlayerActions instance)
            {
                if (m_Wrapper.m_DumplingPlayerActionsCallbackInterface != null)
                {
                    @Look.started -= m_Wrapper.m_DumplingPlayerActionsCallbackInterface.OnLook;
                    @Look.performed -= m_Wrapper.m_DumplingPlayerActionsCallbackInterface.OnLook;
                    @Look.canceled -= m_Wrapper.m_DumplingPlayerActionsCallbackInterface.OnLook;
                }
                m_Wrapper.m_DumplingPlayerActionsCallbackInterface = instance;
                if (instance != null)
                {
                    @Look.started += instance.OnLook;
                    @Look.performed += instance.OnLook;
                    @Look.canceled += instance.OnLook;
                }
            }
        }
        public DumplingPlayerActions @DumplingPlayer => new DumplingPlayerActions(this);
        private int m_KeyboardMouseSchemeIndex = -1;
        public InputControlScheme KeyboardMouseScheme
        {
            get
            {
                if (m_KeyboardMouseSchemeIndex == -1) m_KeyboardMouseSchemeIndex = asset.FindControlSchemeIndex("Keyboard & Mouse");
                return asset.controlSchemes[m_KeyboardMouseSchemeIndex];
            }
        }
        public interface IDumplingPlayerActions
        {
            void OnLook(InputAction.CallbackContext context);
        }
    }
}
